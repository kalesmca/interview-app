# Step 1: Start with a base image
# We're using a lightweight Node.js image (version 16) based on Alpine Linux for efficiency.
FROM node:20-alpine AS build

# Step 2: Set the working directory
# This creates a directory called /app inside the container and sets it as the working directory.
WORKDIR /app

# Step 3: Copy package.json and package-lock.json files
# This step copies the package.json and package-lock.json into the container to install the necessary dependencies.
COPY package*.json ./

# Step 4: Install dependencies
# Run npm install to install all the required dependencies for the application.
RUN npm install

# Step 5: Copy the rest of the application code
# After installing the dependencies, copy the rest of the application code from the host machine into the container.
COPY . .

# Step 6: Build the React app for production
# Run the build command to create optimized static files in the 'build' directory.
RUN npm run build

# Step 7: Switch to a new lightweight Nginx image
# We'll use Nginx to serve the static files generated by the build process.
FROM nginx:alpine

# Step 8: Copy the built files from the previous stage (build) to the Nginx html directory
# This copies the production-ready static files from the build directory to the Nginx container.
COPY --from=build /app/build /usr/share/nginx/html

# Step 9: Expose port 80 for the application
# Nginx runs on port 80 by default, so we'll expose this port to access the app.
EXPOSE 80

# Step 10: Command to run Nginx
# The CMD command tells Docker to run Nginx with the necessary configurations.
CMD ["nginx", "-g", "daemon off;"]